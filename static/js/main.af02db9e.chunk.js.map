{"version":3,"sources":["serviceWorker.js","components/counter.jsx","components/counters.jsx","index.js","logo.svg"],"names":["Boolean","window","location","hostname","match","Counter","state","value","_this","props","tag","styles","fontSize","fontWeight","handleIncrement","setState","handleDecrement","this","length","react_default","a","createElement","map","tags","_this2","getBadgeClasses","children","style","className","onClick","onDelete","id","max","min","renderTags","classes","Component","Counters","counters","handleDelete","counterId","filter","c","handleReset","counter","components_counter","key","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"+LAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,wGC2CUC,6MA3DXC,MAAQ,CACJC,MAAMC,EAAKC,MAAMF,MACjBG,IAAK,CAAC,YAAY,eAGtBC,OAAO,CACJC,SAAS,GACTC,WAAW,UAMdC,gBAAkB,WACXN,EAAKF,MAAMC,MAAM,IAErBC,EAAKO,SAAS,CAACR,MAAOC,EAAKF,MAAMC,MAAQ,OAG5CS,gBAAgB,WACTR,EAAKF,MAAMC,MAAM,GAErBC,EAAKO,SAAS,CAACR,MAAMC,EAAKF,MAAMC,MAAM,iFAZrC,OAA2B,IAAxBU,KAAKX,MAAMI,IAAIQ,OAAkBC,EAAAC,EAAAC,cAAA,kCAC5BF,EAAAC,EAAAC,cAAA,UAAKJ,KAAKX,MAAMI,IAAIY,IAAI,SAAAC,GAAI,OAAIJ,EAAAC,EAAAC,cAAA,UAAME,KAAtC,mCAcT,GAAsB,KAAnBN,KAAKX,MAAMC,MAEd,OAAOY,EAAAC,EAAAC,cAAA,uDAIP,GAAsB,IAAnBJ,KAAKX,MAAMC,MAEd,OAAOY,EAAAC,EAAAC,cAAA,0DAID,IAAAG,EAAAP,KACQA,KAAKQ,kBAClB,OACIN,EAAAC,EAAAC,cAAA,WACKJ,KAAKR,MAAMiB,SAChBP,EAAAC,EAAAC,cAAA,QAAMM,MAAQV,KAAKN,OAAQiB,UAAWX,KAAKQ,mBAAoBR,KAAKX,MAAMC,OAC1EY,EAAAC,EAAAC,cAAA,UAAQQ,QAASZ,KAAKD,gBAAiBY,UAAU,uBAAjD,aACAT,EAAAC,EAAAC,cAAA,UAAQQ,QAASZ,KAAKH,gBAAiBc,UAAU,yBAAjD,aACAT,EAAAC,EAAAC,cAAA,UAAQQ,QAAS,kBAAIL,EAAKf,MAAMqB,SAASN,EAAKf,MAAMsB,KAAKH,UAAU,sBAAnE,UACAX,KAAKe,MACLf,KAAKgB,MACLhB,KAAKiB,wDAKT,IAAIC,EAAU,kBAEd,OADAA,GAAiC,IAArBlB,KAAKX,MAAMC,MAAe,UAAY,iBAvDpC6B,aCgCRC,6MA9BX/B,MAAQ,CACJgC,SAAS,CACL,CAACP,GAAG,EAAExB,MAAM,GACZ,CAACwB,GAAG,EAAExB,MAAM,GACZ,CAACwB,GAAG,EAAExB,MAAM,GACZ,CAACwB,GAAG,EAAExB,MAAM,OAInBgC,aAAa,SAAAC,GACX,IAAMF,EAAS9B,EAAKF,MAAMgC,SAASG,OAAO,SAAAC,GAAC,OAAEA,EAAEX,KAAOS,IACtDhC,EAAKO,SAAS,CAACuB,gBAGjBK,YAAc,WACf,IAAML,EAAU9B,EAAKF,MAAMgC,SAAShB,IAAK,SAAAoB,GAErC,OADAA,EAAEnC,MAAM,EACDmC,IAEXlC,EAAKO,SAAS,CAACuB,sFAEN,IAAAd,EAAAP,KACL,OAAQE,EAAAC,EAAAC,cAAA,WACJF,EAAAC,EAAAC,cAAA,UAAQQ,QAASZ,KAAK0B,YAAYf,UAAU,uBAA5C,SACCX,KAAKX,MAAMgC,SAAShB,IAAI,SAAAsB,GAAO,OAC/BzB,EAAAC,EAAAC,cAACwB,EAAD,CAASC,IAAKF,EAAQb,GAAID,SAAUN,EAAKe,aAAchC,MAAOqC,EAAQrC,MAAOwB,GAAIa,EAAQb,eA1B/EK,aCOvBW,IAASC,OAAO7B,EAAAC,EAAAC,cAACiB,EAAD,MAAcW,SAASC,eAAe,SHwHhD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kCInInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.af02db9e.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n"," import React, { Component } from 'react';\n class Counter extends Component {\n     state = {  \n         value:this.props.value,\n         tag: ['max is 10','min is 0']\n         \n     };\n     styles={\n        fontSize:60,\n        fontWeight:'bold'\n     };\n     renderTags(){\n         if(this.state.tag.length===0) return<p>there are no elements</p>;\n         return  <ul>{this.state.tag.map(tags => <ol >{tags}</ol>)} </ul>;\n     }\n     handleIncrement = () => {\n         if(this.state.value<10)\n         {\n        this.setState({value: this.state.value + 1})\n    }\n     };\n     handleDecrement=() =>{\n         if(this.state.value>0)\n         {\n        this.setState({value:this.state.value-1})}\n };\n     max(){\n        if(this.state.value===10)\n        {\n        return <h2>This is max</h2>;\n        }\n    }\n    min(){\n        if(this.state.value===0)\n        {\n        return <h2>This is min</h2>;\n        }\n    }\n\n     render() {   \n        let classes = this.getBadgeClasses();\n         return(\n             <div> \n                 {this.props.children}\n             <span style={ this.styles} className={this.getBadgeClasses()}>{this.state.value}</span>\n             <button onClick={this.handleDecrement} className=\"btn btn-ternary m-2\">Decrement</button>\n             <button onClick={this.handleIncrement} className=\"btn btn-secondary m-2\">Increment</button>\n             <button onClick={()=>this.props.onDelete(this.props.id)} className=\"btn btn-danger m-2\">Delete</button>\n            {this.max()}\n            {this.min()}\n            {this.renderTags()}\n             </div>\n         );\n     }\n     getBadgeClasses() {\n         let classes = \"badge m2 badge-\";\n         classes += (this.state.value === 0) ? \"warning\" : \"primary\";\n         return classes;\n     }\n }\n  \n export default Counter;","import React, { Component } from 'react';\nimport Counter from './counter';\nclass Counters extends Component {\n    state = { \n        counters:[\n            {id:1,value:1},\n            {id:2,value:1},\n            {id:3,value:1},\n            {id:4,value:1}\n        ]\n     };\n\n     handleDelete=counterId =>{\n       const counters=this.state.counters.filter(c=>c.id !== counterId);\n       this.setState({counters});\n     };\n\n     handleReset = () => {\n    const counters= this.state.counters.map( c => {\n        c.value=0;\n        return c;\n    });\n    this.setState({counters}); \n     };\n    render() { \n        return (<div>\n            <button onClick={this.handleReset}className=\"btn btn-primary m-2\">Reset</button>\n           { this.state.counters.map(counter =>(\n             <Counter key={counter.id} onDelete={this.handleDelete} value={counter.value} id={counter.id}/>))}\n        </div>  );\n    }\n}\n \nexport default Counters;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport Counter from './components/counter';\nimport Counters from './components/counters';\n\nReactDOM.render(<Counters />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}